<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
    "http://struts.apache.org/dtds/struts-2.0.dtd">

<struts>
	
	<constant name="struts.custom.i18n.resources" value="global" />
	<constant name="struts.devMode" value="false" />
	<constant name="struts.mapper.class" value="rest" />
	<!-- struts2 busca paquetes que terminen, en su nombre, con las siguientes 
		cadenas en busca de acciones -->
	<constant name="struts.convention.package.locators" value="controller" />
	
	<!-- Indica el sufijo del nombre de los archivos para las acciones no mapeadas 
		explicitamente -->
	<constant name="struts.convention.action.suffix" value="Ctrl" />

	<!-- Mapea todas las acciones encontradas aun y cuando no exista la anotacion 
		correspondiente -->
	<constant name="struts.convention.action.mapAllMatches" value="true" />
	
	<constant name="struts.convention.default.parent.package" value="rest-default"/><!-- Duda -->
	
	<!-- Ruta donde buscara los resultados -->
	<constant name="struts.convention.result.path" value="/content" />
	<package name="prisma" extends="rest-default">
		<interceptors>
			
			<interceptor name="workflow"
				class="org.apache.struts2.rest.RestWorkflowInterceptor"></interceptor>

			<!-- Define la pila de interceptores a ser aplicada a cada acción invocada -->
			<interceptor-stack name="stack">
			
				<!-- Permite el mapeo de una excepción hacia un result code, es recomendado 
					que sea el primer interceptor -->
				<interceptor-ref name="exception" />


				<!-- Hace disponibles todas las propiedades del action previo al action 
					actual. -->
				<interceptor-ref name="chain" />

				<interceptor-ref name="profiling" />

				<interceptor-ref name="actionMappingParams" />

				<!-- Almacena los mensajes, mensajes de error y de error de campos en 
					la sesión de HTTP, tal que permite que sean recuperables en un momento posterior. 
					Permite que los mensajes estén disponibles para más de una petición http -->
				<!-- Indica que el interceptor siempre recuperará los mensajes almacenados; 
					tras la ejecución de un action, si el result es una instancia de ServletRedirectResult, 
					los mensajes serán almacenados automáticamente en la sesión http -->
				<interceptor-ref name="store">
					<param name="operationMode">AUTOMATIC</param>
				</interceptor-ref>

				<!-- Si el action implementa modeldriven le permite poner en la pila 
					de valores el modelo -->
				<interceptor-ref name="modelDriven">
					<!-- Indica que el modelo será refrescado en la pila de valores después 
						de la ejecución de un action y antes de la ejecución del result. Esto es 
						útil si se desea cambiar la instancia del modelo durante la fase de ejecución 
						del action, como cuando se carga desde la capa de datos. -->
					<param name="refreshModelBeforeResult">true</param>
				</interceptor-ref>


				<interceptor-ref name="rest" />

				<!-- Realiza la validación de todos aquellos métodos para los que exista 
					un correspondiente validate, siempre y cuando los primeros estén anotados -->
				<interceptor-ref name="validation">
					<!-- Se excluyen los métodos -->
					<param name="excludeMethods">input,back,cancel,browse,show,edit,editNew,index,deleteConfirm</param>
				</interceptor-ref>

			</interceptor-stack>
		</interceptors>

		<default-interceptor-ref name="stack" />

		
	</package>
</struts>
